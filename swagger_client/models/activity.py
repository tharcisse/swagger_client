# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Activity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, completion_percent=None, log=None, parameters=None, created_at=None, updated_at=None, environments=None, project=None, completed_at=None, state=None, result=None, started_at=None, type=None, payload=None):
        """
        Activity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'completion_percent': 'int',
            'log': 'str',
            'parameters': 'object',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'environments': 'list[str]',
            'project': 'str',
            'completed_at': 'datetime',
            'state': 'str',
            'result': 'str',
            'started_at': 'datetime',
            'type': 'str',
            'payload': 'object'
        }

        self.attribute_map = {
            'completion_percent': 'completion_percent',
            'log': 'log',
            'parameters': 'parameters',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'environments': 'environments',
            'project': 'project',
            'completed_at': 'completed_at',
            'state': 'state',
            'result': 'result',
            'started_at': 'started_at',
            'type': 'type',
            'payload': 'payload'
        }

        self._completion_percent = completion_percent
        self._log = log
        self._parameters = parameters
        self._created_at = created_at
        self._updated_at = updated_at
        self._environments = environments
        self._project = project
        self._completed_at = completed_at
        self._state = state
        self._result = result
        self._started_at = started_at
        self._type = type
        self._payload = payload

    @property
    def completion_percent(self):
        """
        Gets the completion_percent of this Activity.

        :return: The completion_percent of this Activity.
        :rtype: int
        """
        return self._completion_percent

    @completion_percent.setter
    def completion_percent(self, completion_percent):
        """
        Sets the completion_percent of this Activity.

        :param completion_percent: The completion_percent of this Activity.
        :type: int
        """
        if completion_percent is None:
            raise ValueError("Invalid value for `completion_percent`, must not be `None`")

        self._completion_percent = completion_percent

    @property
    def log(self):
        """
        Gets the log of this Activity.

        :return: The log of this Activity.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """
        Sets the log of this Activity.

        :param log: The log of this Activity.
        :type: str
        """
        if log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")

        self._log = log

    @property
    def parameters(self):
        """
        Gets the parameters of this Activity.

        :return: The parameters of this Activity.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this Activity.

        :param parameters: The parameters of this Activity.
        :type: object
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def created_at(self):
        """
        Gets the created_at of this Activity.

        :return: The created_at of this Activity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Activity.

        :param created_at: The created_at of this Activity.
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Activity.

        :return: The updated_at of this Activity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Activity.

        :param updated_at: The updated_at of this Activity.
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def environments(self):
        """
        Gets the environments of this Activity.

        :return: The environments of this Activity.
        :rtype: list[str]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """
        Sets the environments of this Activity.

        :param environments: The environments of this Activity.
        :type: list[str]
        """
        if environments is None:
            raise ValueError("Invalid value for `environments`, must not be `None`")

        self._environments = environments

    @property
    def project(self):
        """
        Gets the project of this Activity.

        :return: The project of this Activity.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this Activity.

        :param project: The project of this Activity.
        :type: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def completed_at(self):
        """
        Gets the completed_at of this Activity.

        :return: The completed_at of this Activity.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """
        Sets the completed_at of this Activity.

        :param completed_at: The completed_at of this Activity.
        :type: datetime
        """
        if completed_at is None:
            raise ValueError("Invalid value for `completed_at`, must not be `None`")

        self._completed_at = completed_at

    @property
    def state(self):
        """
        Gets the state of this Activity.

        :return: The state of this Activity.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Activity.

        :param state: The state of this Activity.
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def result(self):
        """
        Gets the result of this Activity.

        :return: The result of this Activity.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this Activity.

        :param result: The result of this Activity.
        :type: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def started_at(self):
        """
        Gets the started_at of this Activity.

        :return: The started_at of this Activity.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """
        Sets the started_at of this Activity.

        :param started_at: The started_at of this Activity.
        :type: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")

        self._started_at = started_at

    @property
    def type(self):
        """
        Gets the type of this Activity.

        :return: The type of this Activity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Activity.

        :param type: The type of this Activity.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def payload(self):
        """
        Gets the payload of this Activity.

        :return: The payload of this Activity.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this Activity.

        :param payload: The payload of this Activity.
        :type: object
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Activity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
