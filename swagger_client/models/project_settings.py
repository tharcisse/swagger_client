# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProjectSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, development_service_size=None, magic_enabled=None, project_config_dir=None, variables_prefix=None, application_config_file=None, initialize=None, product_code=None, use_drupal_defaults=None, product_name=None, bot_email=None):
        """
        ProjectSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'development_service_size': 'str',
            'magic_enabled': 'bool',
            'project_config_dir': 'str',
            'variables_prefix': 'str',
            'application_config_file': 'str',
            'initialize': 'object',
            'product_code': 'str',
            'use_drupal_defaults': 'bool',
            'product_name': 'str',
            'bot_email': 'str'
        }

        self.attribute_map = {
            'development_service_size': 'development_service_size',
            'magic_enabled': 'magic_enabled',
            'project_config_dir': 'project_config_dir',
            'variables_prefix': 'variables_prefix',
            'application_config_file': 'application_config_file',
            'initialize': 'initialize',
            'product_code': 'product_code',
            'use_drupal_defaults': 'use_drupal_defaults',
            'product_name': 'product_name',
            'bot_email': 'bot_email'
        }

        self._development_service_size = development_service_size
        self._magic_enabled = magic_enabled
        self._project_config_dir = project_config_dir
        self._variables_prefix = variables_prefix
        self._application_config_file = application_config_file
        self._initialize = initialize
        self._product_code = product_code
        self._use_drupal_defaults = use_drupal_defaults
        self._product_name = product_name
        self._bot_email = bot_email

    @property
    def development_service_size(self):
        """
        Gets the development_service_size of this ProjectSettings.

        :return: The development_service_size of this ProjectSettings.
        :rtype: str
        """
        return self._development_service_size

    @development_service_size.setter
    def development_service_size(self, development_service_size):
        """
        Sets the development_service_size of this ProjectSettings.

        :param development_service_size: The development_service_size of this ProjectSettings.
        :type: str
        """
        if development_service_size is None:
            raise ValueError("Invalid value for `development_service_size`, must not be `None`")

        self._development_service_size = development_service_size

    @property
    def magic_enabled(self):
        """
        Gets the magic_enabled of this ProjectSettings.

        :return: The magic_enabled of this ProjectSettings.
        :rtype: bool
        """
        return self._magic_enabled

    @magic_enabled.setter
    def magic_enabled(self, magic_enabled):
        """
        Sets the magic_enabled of this ProjectSettings.

        :param magic_enabled: The magic_enabled of this ProjectSettings.
        :type: bool
        """
        if magic_enabled is None:
            raise ValueError("Invalid value for `magic_enabled`, must not be `None`")

        self._magic_enabled = magic_enabled

    @property
    def project_config_dir(self):
        """
        Gets the project_config_dir of this ProjectSettings.

        :return: The project_config_dir of this ProjectSettings.
        :rtype: str
        """
        return self._project_config_dir

    @project_config_dir.setter
    def project_config_dir(self, project_config_dir):
        """
        Sets the project_config_dir of this ProjectSettings.

        :param project_config_dir: The project_config_dir of this ProjectSettings.
        :type: str
        """
        if project_config_dir is None:
            raise ValueError("Invalid value for `project_config_dir`, must not be `None`")

        self._project_config_dir = project_config_dir

    @property
    def variables_prefix(self):
        """
        Gets the variables_prefix of this ProjectSettings.

        :return: The variables_prefix of this ProjectSettings.
        :rtype: str
        """
        return self._variables_prefix

    @variables_prefix.setter
    def variables_prefix(self, variables_prefix):
        """
        Sets the variables_prefix of this ProjectSettings.

        :param variables_prefix: The variables_prefix of this ProjectSettings.
        :type: str
        """
        if variables_prefix is None:
            raise ValueError("Invalid value for `variables_prefix`, must not be `None`")

        self._variables_prefix = variables_prefix

    @property
    def application_config_file(self):
        """
        Gets the application_config_file of this ProjectSettings.

        :return: The application_config_file of this ProjectSettings.
        :rtype: str
        """
        return self._application_config_file

    @application_config_file.setter
    def application_config_file(self, application_config_file):
        """
        Sets the application_config_file of this ProjectSettings.

        :param application_config_file: The application_config_file of this ProjectSettings.
        :type: str
        """
        if application_config_file is None:
            raise ValueError("Invalid value for `application_config_file`, must not be `None`")

        self._application_config_file = application_config_file

    @property
    def initialize(self):
        """
        Gets the initialize of this ProjectSettings.

        :return: The initialize of this ProjectSettings.
        :rtype: object
        """
        return self._initialize

    @initialize.setter
    def initialize(self, initialize):
        """
        Sets the initialize of this ProjectSettings.

        :param initialize: The initialize of this ProjectSettings.
        :type: object
        """
        if initialize is None:
            raise ValueError("Invalid value for `initialize`, must not be `None`")

        self._initialize = initialize

    @property
    def product_code(self):
        """
        Gets the product_code of this ProjectSettings.

        :return: The product_code of this ProjectSettings.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """
        Sets the product_code of this ProjectSettings.

        :param product_code: The product_code of this ProjectSettings.
        :type: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")

        self._product_code = product_code

    @property
    def use_drupal_defaults(self):
        """
        Gets the use_drupal_defaults of this ProjectSettings.

        :return: The use_drupal_defaults of this ProjectSettings.
        :rtype: bool
        """
        return self._use_drupal_defaults

    @use_drupal_defaults.setter
    def use_drupal_defaults(self, use_drupal_defaults):
        """
        Sets the use_drupal_defaults of this ProjectSettings.

        :param use_drupal_defaults: The use_drupal_defaults of this ProjectSettings.
        :type: bool
        """
        if use_drupal_defaults is None:
            raise ValueError("Invalid value for `use_drupal_defaults`, must not be `None`")

        self._use_drupal_defaults = use_drupal_defaults

    @property
    def product_name(self):
        """
        Gets the product_name of this ProjectSettings.

        :return: The product_name of this ProjectSettings.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """
        Sets the product_name of this ProjectSettings.

        :param product_name: The product_name of this ProjectSettings.
        :type: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def bot_email(self):
        """
        Gets the bot_email of this ProjectSettings.

        :return: The bot_email of this ProjectSettings.
        :rtype: str
        """
        return self._bot_email

    @bot_email.setter
    def bot_email(self, bot_email):
        """
        Sets the bot_email of this ProjectSettings.

        :param bot_email: The bot_email of this ProjectSettings.
        :type: str
        """
        if bot_email is None:
            raise ValueError("Invalid value for `bot_email`, must not be `None`")

        self._bot_email = bot_email

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProjectSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
