# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvironmentInitializeFileinitialize(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, path=None, mode=None, contents=None):
        """
        EnvironmentInitializeFileinitialize - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'path': 'str',
            'mode': 'int',
            'contents': 'str'
        }

        self.attribute_map = {
            'path': 'path',
            'mode': 'mode',
            'contents': 'contents'
        }

        self._path = path
        self._mode = mode
        self._contents = contents

    @property
    def path(self):
        """
        Gets the path of this EnvironmentInitializeFileinitialize.

        :return: The path of this EnvironmentInitializeFileinitialize.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this EnvironmentInitializeFileinitialize.

        :param path: The path of this EnvironmentInitializeFileinitialize.
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def mode(self):
        """
        Gets the mode of this EnvironmentInitializeFileinitialize.

        :return: The mode of this EnvironmentInitializeFileinitialize.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this EnvironmentInitializeFileinitialize.

        :param mode: The mode of this EnvironmentInitializeFileinitialize.
        :type: int
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def contents(self):
        """
        Gets the contents of this EnvironmentInitializeFileinitialize.

        :return: The contents of this EnvironmentInitializeFileinitialize.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """
        Sets the contents of this EnvironmentInitializeFileinitialize.

        :param contents: The contents of this EnvironmentInitializeFileinitialize.
        :type: str
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")

        self._contents = contents

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnvironmentInitializeFileinitialize):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
