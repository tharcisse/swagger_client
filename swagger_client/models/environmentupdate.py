# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Environmentupdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, enable_smtp=None, name=None, parent=None, title=None, restrict_robots=None, http_access=None):
        """
        Environmentupdate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enable_smtp': 'bool',
            'name': 'str',
            'parent': 'str',
            'title': 'str',
            'restrict_robots': 'bool',
            'http_access': 'HttpAccessupdate'
        }

        self.attribute_map = {
            'enable_smtp': 'enable_smtp',
            'name': 'name',
            'parent': 'parent',
            'title': 'title',
            'restrict_robots': 'restrict_robots',
            'http_access': 'http_access'
        }

        self._enable_smtp = enable_smtp
        self._name = name
        self._parent = parent
        self._title = title
        self._restrict_robots = restrict_robots
        self._http_access = http_access

    @property
    def enable_smtp(self):
        """
        Gets the enable_smtp of this Environmentupdate.

        :return: The enable_smtp of this Environmentupdate.
        :rtype: bool
        """
        return self._enable_smtp

    @enable_smtp.setter
    def enable_smtp(self, enable_smtp):
        """
        Sets the enable_smtp of this Environmentupdate.

        :param enable_smtp: The enable_smtp of this Environmentupdate.
        :type: bool
        """
        if enable_smtp is None:
            raise ValueError("Invalid value for `enable_smtp`, must not be `None`")

        self._enable_smtp = enable_smtp

    @property
    def name(self):
        """
        Gets the name of this Environmentupdate.

        :return: The name of this Environmentupdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Environmentupdate.

        :param name: The name of this Environmentupdate.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """
        Gets the parent of this Environmentupdate.

        :return: The parent of this Environmentupdate.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this Environmentupdate.

        :param parent: The parent of this Environmentupdate.
        :type: str
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def title(self):
        """
        Gets the title of this Environmentupdate.

        :return: The title of this Environmentupdate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Environmentupdate.

        :param title: The title of this Environmentupdate.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def restrict_robots(self):
        """
        Gets the restrict_robots of this Environmentupdate.

        :return: The restrict_robots of this Environmentupdate.
        :rtype: bool
        """
        return self._restrict_robots

    @restrict_robots.setter
    def restrict_robots(self, restrict_robots):
        """
        Sets the restrict_robots of this Environmentupdate.

        :param restrict_robots: The restrict_robots of this Environmentupdate.
        :type: bool
        """
        if restrict_robots is None:
            raise ValueError("Invalid value for `restrict_robots`, must not be `None`")

        self._restrict_robots = restrict_robots

    @property
    def http_access(self):
        """
        Gets the http_access of this Environmentupdate.

        :return: The http_access of this Environmentupdate.
        :rtype: HttpAccessupdate
        """
        return self._http_access

    @http_access.setter
    def http_access(self, http_access):
        """
        Sets the http_access of this Environmentupdate.

        :param http_access: The http_access of this Environmentupdate.
        :type: HttpAccessupdate
        """
        if http_access is None:
            raise ValueError("Invalid value for `http_access`, must not be `None`")

        self._http_access = http_access

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Environmentupdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
