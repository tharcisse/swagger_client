# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Environment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, head_commit=None, machine_name=None, name=None, parent=None, title=None, created_at=None, updated_at=None, restrict_robots=None, project=None, is_dirty=None, enable_smtp=None, has_code=None, deployment_target=None, http_access=None, is_main=None):
        """
        Environment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'head_commit': 'str',
            'machine_name': 'str',
            'name': 'str',
            'parent': 'str',
            'title': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'restrict_robots': 'bool',
            'project': 'str',
            'is_dirty': 'bool',
            'enable_smtp': 'bool',
            'has_code': 'bool',
            'deployment_target': 'str',
            'http_access': 'HttpAccess',
            'is_main': 'bool'
        }

        self.attribute_map = {
            'status': 'status',
            'head_commit': 'head_commit',
            'machine_name': 'machine_name',
            'name': 'name',
            'parent': 'parent',
            'title': 'title',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'restrict_robots': 'restrict_robots',
            'project': 'project',
            'is_dirty': 'is_dirty',
            'enable_smtp': 'enable_smtp',
            'has_code': 'has_code',
            'deployment_target': 'deployment_target',
            'http_access': 'http_access',
            'is_main': 'is_main'
        }

        self._status = status
        self._head_commit = head_commit
        self._machine_name = machine_name
        self._name = name
        self._parent = parent
        self._title = title
        self._created_at = created_at
        self._updated_at = updated_at
        self._restrict_robots = restrict_robots
        self._project = project
        self._is_dirty = is_dirty
        self._enable_smtp = enable_smtp
        self._has_code = has_code
        self._deployment_target = deployment_target
        self._http_access = http_access
        self._is_main = is_main

    @property
    def status(self):
        """
        Gets the status of this Environment.

        :return: The status of this Environment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Environment.

        :param status: The status of this Environment.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def head_commit(self):
        """
        Gets the head_commit of this Environment.

        :return: The head_commit of this Environment.
        :rtype: str
        """
        return self._head_commit

    @head_commit.setter
    def head_commit(self, head_commit):
        """
        Sets the head_commit of this Environment.

        :param head_commit: The head_commit of this Environment.
        :type: str
        """
        if head_commit is None:
            raise ValueError("Invalid value for `head_commit`, must not be `None`")

        self._head_commit = head_commit

    @property
    def machine_name(self):
        """
        Gets the machine_name of this Environment.

        :return: The machine_name of this Environment.
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """
        Sets the machine_name of this Environment.

        :param machine_name: The machine_name of this Environment.
        :type: str
        """
        if machine_name is None:
            raise ValueError("Invalid value for `machine_name`, must not be `None`")

        self._machine_name = machine_name

    @property
    def name(self):
        """
        Gets the name of this Environment.

        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Environment.

        :param name: The name of this Environment.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """
        Gets the parent of this Environment.

        :return: The parent of this Environment.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this Environment.

        :param parent: The parent of this Environment.
        :type: str
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def title(self):
        """
        Gets the title of this Environment.

        :return: The title of this Environment.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Environment.

        :param title: The title of this Environment.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def created_at(self):
        """
        Gets the created_at of this Environment.

        :return: The created_at of this Environment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Environment.

        :param created_at: The created_at of this Environment.
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Environment.

        :return: The updated_at of this Environment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Environment.

        :param updated_at: The updated_at of this Environment.
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def restrict_robots(self):
        """
        Gets the restrict_robots of this Environment.

        :return: The restrict_robots of this Environment.
        :rtype: bool
        """
        return self._restrict_robots

    @restrict_robots.setter
    def restrict_robots(self, restrict_robots):
        """
        Sets the restrict_robots of this Environment.

        :param restrict_robots: The restrict_robots of this Environment.
        :type: bool
        """
        if restrict_robots is None:
            raise ValueError("Invalid value for `restrict_robots`, must not be `None`")

        self._restrict_robots = restrict_robots

    @property
    def project(self):
        """
        Gets the project of this Environment.

        :return: The project of this Environment.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this Environment.

        :param project: The project of this Environment.
        :type: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def is_dirty(self):
        """
        Gets the is_dirty of this Environment.

        :return: The is_dirty of this Environment.
        :rtype: bool
        """
        return self._is_dirty

    @is_dirty.setter
    def is_dirty(self, is_dirty):
        """
        Sets the is_dirty of this Environment.

        :param is_dirty: The is_dirty of this Environment.
        :type: bool
        """
        if is_dirty is None:
            raise ValueError("Invalid value for `is_dirty`, must not be `None`")

        self._is_dirty = is_dirty

    @property
    def enable_smtp(self):
        """
        Gets the enable_smtp of this Environment.

        :return: The enable_smtp of this Environment.
        :rtype: bool
        """
        return self._enable_smtp

    @enable_smtp.setter
    def enable_smtp(self, enable_smtp):
        """
        Sets the enable_smtp of this Environment.

        :param enable_smtp: The enable_smtp of this Environment.
        :type: bool
        """
        if enable_smtp is None:
            raise ValueError("Invalid value for `enable_smtp`, must not be `None`")

        self._enable_smtp = enable_smtp

    @property
    def has_code(self):
        """
        Gets the has_code of this Environment.

        :return: The has_code of this Environment.
        :rtype: bool
        """
        return self._has_code

    @has_code.setter
    def has_code(self, has_code):
        """
        Sets the has_code of this Environment.

        :param has_code: The has_code of this Environment.
        :type: bool
        """
        if has_code is None:
            raise ValueError("Invalid value for `has_code`, must not be `None`")

        self._has_code = has_code

    @property
    def deployment_target(self):
        """
        Gets the deployment_target of this Environment.

        :return: The deployment_target of this Environment.
        :rtype: str
        """
        return self._deployment_target

    @deployment_target.setter
    def deployment_target(self, deployment_target):
        """
        Sets the deployment_target of this Environment.

        :param deployment_target: The deployment_target of this Environment.
        :type: str
        """
        if deployment_target is None:
            raise ValueError("Invalid value for `deployment_target`, must not be `None`")

        self._deployment_target = deployment_target

    @property
    def http_access(self):
        """
        Gets the http_access of this Environment.

        :return: The http_access of this Environment.
        :rtype: HttpAccess
        """
        return self._http_access

    @http_access.setter
    def http_access(self, http_access):
        """
        Sets the http_access of this Environment.

        :param http_access: The http_access of this Environment.
        :type: HttpAccess
        """
        if http_access is None:
            raise ValueError("Invalid value for `http_access`, must not be `None`")

        self._http_access = http_access

    @property
    def is_main(self):
        """
        Gets the is_main of this Environment.

        :return: The is_main of this Environment.
        :rtype: bool
        """
        return self._is_main

    @is_main.setter
    def is_main(self, is_main):
        """
        Sets the is_main of this Environment.

        :param is_main: The is_main of this Environment.
        :type: bool
        """
        if is_main is None:
            raise ValueError("Invalid value for `is_main`, must not be `None`")

        self._is_main = is_main

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Environment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
