# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvironmentInitializeinitialize(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, profile=None, files=None, config=None, repository=None):
        """
        EnvironmentInitializeinitialize - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'profile': 'str',
            'files': 'list[EnvironmentInitializeFileinitialize]',
            'config': 'str',
            'repository': 'str'
        }

        self.attribute_map = {
            'profile': 'profile',
            'files': 'files',
            'config': 'config',
            'repository': 'repository'
        }

        self._profile = profile
        self._files = files
        self._config = config
        self._repository = repository

    @property
    def profile(self):
        """
        Gets the profile of this EnvironmentInitializeinitialize.

        :return: The profile of this EnvironmentInitializeinitialize.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this EnvironmentInitializeinitialize.

        :param profile: The profile of this EnvironmentInitializeinitialize.
        :type: str
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")

        self._profile = profile

    @property
    def files(self):
        """
        Gets the files of this EnvironmentInitializeinitialize.

        :return: The files of this EnvironmentInitializeinitialize.
        :rtype: list[EnvironmentInitializeFileinitialize]
        """
        return self._files

    @files.setter
    def files(self, files):
        """
        Sets the files of this EnvironmentInitializeinitialize.

        :param files: The files of this EnvironmentInitializeinitialize.
        :type: list[EnvironmentInitializeFileinitialize]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")

        self._files = files

    @property
    def config(self):
        """
        Gets the config of this EnvironmentInitializeinitialize.

        :return: The config of this EnvironmentInitializeinitialize.
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this EnvironmentInitializeinitialize.

        :param config: The config of this EnvironmentInitializeinitialize.
        :type: str
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")

        self._config = config

    @property
    def repository(self):
        """
        Gets the repository of this EnvironmentInitializeinitialize.

        :return: The repository of this EnvironmentInitializeinitialize.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """
        Sets the repository of this EnvironmentInitializeinitialize.

        :param repository: The repository of this EnvironmentInitializeinitialize.
        :type: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnvironmentInitializeinitialize):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
