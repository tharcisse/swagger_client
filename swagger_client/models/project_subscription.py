# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProjectSubscription(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_licenses=None, restricted=None, included_users=None, storage=None, environments=None, license_uri=None, plan=None, suspended=None, subscription_management_uri=None):
        """
        ProjectSubscription - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_licenses': 'int',
            'restricted': 'bool',
            'included_users': 'int',
            'storage': 'int',
            'environments': 'int',
            'license_uri': 'str',
            'plan': 'str',
            'suspended': 'bool',
            'subscription_management_uri': 'str'
        }

        self.attribute_map = {
            'user_licenses': 'user_licenses',
            'restricted': 'restricted',
            'included_users': 'included_users',
            'storage': 'storage',
            'environments': 'environments',
            'license_uri': 'license_uri',
            'plan': 'plan',
            'suspended': 'suspended',
            'subscription_management_uri': 'subscription_management_uri'
        }

        self._user_licenses = user_licenses
        self._restricted = restricted
        self._included_users = included_users
        self._storage = storage
        self._environments = environments
        self._license_uri = license_uri
        self._plan = plan
        self._suspended = suspended
        self._subscription_management_uri = subscription_management_uri

    @property
    def user_licenses(self):
        """
        Gets the user_licenses of this ProjectSubscription.

        :return: The user_licenses of this ProjectSubscription.
        :rtype: int
        """
        return self._user_licenses

    @user_licenses.setter
    def user_licenses(self, user_licenses):
        """
        Sets the user_licenses of this ProjectSubscription.

        :param user_licenses: The user_licenses of this ProjectSubscription.
        :type: int
        """
        if user_licenses is None:
            raise ValueError("Invalid value for `user_licenses`, must not be `None`")

        self._user_licenses = user_licenses

    @property
    def restricted(self):
        """
        Gets the restricted of this ProjectSubscription.

        :return: The restricted of this ProjectSubscription.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """
        Sets the restricted of this ProjectSubscription.

        :param restricted: The restricted of this ProjectSubscription.
        :type: bool
        """
        if restricted is None:
            raise ValueError("Invalid value for `restricted`, must not be `None`")

        self._restricted = restricted

    @property
    def included_users(self):
        """
        Gets the included_users of this ProjectSubscription.

        :return: The included_users of this ProjectSubscription.
        :rtype: int
        """
        return self._included_users

    @included_users.setter
    def included_users(self, included_users):
        """
        Sets the included_users of this ProjectSubscription.

        :param included_users: The included_users of this ProjectSubscription.
        :type: int
        """
        if included_users is None:
            raise ValueError("Invalid value for `included_users`, must not be `None`")

        self._included_users = included_users

    @property
    def storage(self):
        """
        Gets the storage of this ProjectSubscription.

        :return: The storage of this ProjectSubscription.
        :rtype: int
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """
        Sets the storage of this ProjectSubscription.

        :param storage: The storage of this ProjectSubscription.
        :type: int
        """
        if storage is None:
            raise ValueError("Invalid value for `storage`, must not be `None`")

        self._storage = storage

    @property
    def environments(self):
        """
        Gets the environments of this ProjectSubscription.

        :return: The environments of this ProjectSubscription.
        :rtype: int
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """
        Sets the environments of this ProjectSubscription.

        :param environments: The environments of this ProjectSubscription.
        :type: int
        """
        if environments is None:
            raise ValueError("Invalid value for `environments`, must not be `None`")

        self._environments = environments

    @property
    def license_uri(self):
        """
        Gets the license_uri of this ProjectSubscription.

        :return: The license_uri of this ProjectSubscription.
        :rtype: str
        """
        return self._license_uri

    @license_uri.setter
    def license_uri(self, license_uri):
        """
        Sets the license_uri of this ProjectSubscription.

        :param license_uri: The license_uri of this ProjectSubscription.
        :type: str
        """
        if license_uri is None:
            raise ValueError("Invalid value for `license_uri`, must not be `None`")

        self._license_uri = license_uri

    @property
    def plan(self):
        """
        Gets the plan of this ProjectSubscription.

        :return: The plan of this ProjectSubscription.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """
        Sets the plan of this ProjectSubscription.

        :param plan: The plan of this ProjectSubscription.
        :type: str
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def suspended(self):
        """
        Gets the suspended of this ProjectSubscription.

        :return: The suspended of this ProjectSubscription.
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """
        Sets the suspended of this ProjectSubscription.

        :param suspended: The suspended of this ProjectSubscription.
        :type: bool
        """
        if suspended is None:
            raise ValueError("Invalid value for `suspended`, must not be `None`")

        self._suspended = suspended

    @property
    def subscription_management_uri(self):
        """
        Gets the subscription_management_uri of this ProjectSubscription.

        :return: The subscription_management_uri of this ProjectSubscription.
        :rtype: str
        """
        return self._subscription_management_uri

    @subscription_management_uri.setter
    def subscription_management_uri(self, subscription_management_uri):
        """
        Sets the subscription_management_uri of this ProjectSubscription.

        :param subscription_management_uri: The subscription_management_uri of this ProjectSubscription.
        :type: str
        """
        if subscription_management_uri is None:
            raise ValueError("Invalid value for `subscription_management_uri`, must not be `None`")

        self._subscription_management_uri = subscription_management_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProjectSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
