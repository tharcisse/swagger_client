# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RedirectPathupdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, expires=None, to=None, prefix=None, append_suffix=None, regexp=None):
        """
        RedirectPathupdate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'int',
            'expires': 'str',
            'to': 'str',
            'prefix': 'bool',
            'append_suffix': 'bool',
            'regexp': 'bool'
        }

        self.attribute_map = {
            'code': 'code',
            'expires': 'expires',
            'to': 'to',
            'prefix': 'prefix',
            'append_suffix': 'append_suffix',
            'regexp': 'regexp'
        }

        self._code = code
        self._expires = expires
        self._to = to
        self._prefix = prefix
        self._append_suffix = append_suffix
        self._regexp = regexp

    @property
    def code(self):
        """
        Gets the code of this RedirectPathupdate.

        :return: The code of this RedirectPathupdate.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this RedirectPathupdate.

        :param code: The code of this RedirectPathupdate.
        :type: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def expires(self):
        """
        Gets the expires of this RedirectPathupdate.

        :return: The expires of this RedirectPathupdate.
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """
        Sets the expires of this RedirectPathupdate.

        :param expires: The expires of this RedirectPathupdate.
        :type: str
        """
        if expires is None:
            raise ValueError("Invalid value for `expires`, must not be `None`")

        self._expires = expires

    @property
    def to(self):
        """
        Gets the to of this RedirectPathupdate.

        :return: The to of this RedirectPathupdate.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this RedirectPathupdate.

        :param to: The to of this RedirectPathupdate.
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def prefix(self):
        """
        Gets the prefix of this RedirectPathupdate.

        :return: The prefix of this RedirectPathupdate.
        :rtype: bool
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this RedirectPathupdate.

        :param prefix: The prefix of this RedirectPathupdate.
        :type: bool
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def append_suffix(self):
        """
        Gets the append_suffix of this RedirectPathupdate.

        :return: The append_suffix of this RedirectPathupdate.
        :rtype: bool
        """
        return self._append_suffix

    @append_suffix.setter
    def append_suffix(self, append_suffix):
        """
        Sets the append_suffix of this RedirectPathupdate.

        :param append_suffix: The append_suffix of this RedirectPathupdate.
        :type: bool
        """
        if append_suffix is None:
            raise ValueError("Invalid value for `append_suffix`, must not be `None`")

        self._append_suffix = append_suffix

    @property
    def regexp(self):
        """
        Gets the regexp of this RedirectPathupdate.

        :return: The regexp of this RedirectPathupdate.
        :rtype: bool
        """
        return self._regexp

    @regexp.setter
    def regexp(self, regexp):
        """
        Sets the regexp of this RedirectPathupdate.

        :param regexp: The regexp of this RedirectPathupdate.
        :type: bool
        """
        if regexp is None:
            raise ValueError("Invalid value for `regexp`, must not be `None`")

        self._regexp = regexp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RedirectPathupdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
