# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VpnConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, esp=None, margintime=None, secret=None, version=None, gateway_ip=None, ike=None, ikelifetime=None, lifetime=None, remote_subnets=None):
        """
        VpnConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'esp': 'str',
            'margintime': 'str',
            'secret': 'str',
            'version': 'int',
            'gateway_ip': 'str',
            'ike': 'str',
            'ikelifetime': 'str',
            'lifetime': 'str',
            'remote_subnets': 'list[str]'
        }

        self.attribute_map = {
            'esp': 'esp',
            'margintime': 'margintime',
            'secret': 'secret',
            'version': 'version',
            'gateway_ip': 'gateway_ip',
            'ike': 'ike',
            'ikelifetime': 'ikelifetime',
            'lifetime': 'lifetime',
            'remote_subnets': 'remote_subnets'
        }

        self._esp = esp
        self._margintime = margintime
        self._secret = secret
        self._version = version
        self._gateway_ip = gateway_ip
        self._ike = ike
        self._ikelifetime = ikelifetime
        self._lifetime = lifetime
        self._remote_subnets = remote_subnets

    @property
    def esp(self):
        """
        Gets the esp of this VpnConfiguration.

        :return: The esp of this VpnConfiguration.
        :rtype: str
        """
        return self._esp

    @esp.setter
    def esp(self, esp):
        """
        Sets the esp of this VpnConfiguration.

        :param esp: The esp of this VpnConfiguration.
        :type: str
        """
        if esp is None:
            raise ValueError("Invalid value for `esp`, must not be `None`")

        self._esp = esp

    @property
    def margintime(self):
        """
        Gets the margintime of this VpnConfiguration.

        :return: The margintime of this VpnConfiguration.
        :rtype: str
        """
        return self._margintime

    @margintime.setter
    def margintime(self, margintime):
        """
        Sets the margintime of this VpnConfiguration.

        :param margintime: The margintime of this VpnConfiguration.
        :type: str
        """
        if margintime is None:
            raise ValueError("Invalid value for `margintime`, must not be `None`")

        self._margintime = margintime

    @property
    def secret(self):
        """
        Gets the secret of this VpnConfiguration.

        :return: The secret of this VpnConfiguration.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """
        Sets the secret of this VpnConfiguration.

        :param secret: The secret of this VpnConfiguration.
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret

    @property
    def version(self):
        """
        Gets the version of this VpnConfiguration.

        :return: The version of this VpnConfiguration.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this VpnConfiguration.

        :param version: The version of this VpnConfiguration.
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def gateway_ip(self):
        """
        Gets the gateway_ip of this VpnConfiguration.

        :return: The gateway_ip of this VpnConfiguration.
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """
        Sets the gateway_ip of this VpnConfiguration.

        :param gateway_ip: The gateway_ip of this VpnConfiguration.
        :type: str
        """
        if gateway_ip is None:
            raise ValueError("Invalid value for `gateway_ip`, must not be `None`")

        self._gateway_ip = gateway_ip

    @property
    def ike(self):
        """
        Gets the ike of this VpnConfiguration.

        :return: The ike of this VpnConfiguration.
        :rtype: str
        """
        return self._ike

    @ike.setter
    def ike(self, ike):
        """
        Sets the ike of this VpnConfiguration.

        :param ike: The ike of this VpnConfiguration.
        :type: str
        """
        if ike is None:
            raise ValueError("Invalid value for `ike`, must not be `None`")

        self._ike = ike

    @property
    def ikelifetime(self):
        """
        Gets the ikelifetime of this VpnConfiguration.

        :return: The ikelifetime of this VpnConfiguration.
        :rtype: str
        """
        return self._ikelifetime

    @ikelifetime.setter
    def ikelifetime(self, ikelifetime):
        """
        Sets the ikelifetime of this VpnConfiguration.

        :param ikelifetime: The ikelifetime of this VpnConfiguration.
        :type: str
        """
        if ikelifetime is None:
            raise ValueError("Invalid value for `ikelifetime`, must not be `None`")

        self._ikelifetime = ikelifetime

    @property
    def lifetime(self):
        """
        Gets the lifetime of this VpnConfiguration.

        :return: The lifetime of this VpnConfiguration.
        :rtype: str
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """
        Sets the lifetime of this VpnConfiguration.

        :param lifetime: The lifetime of this VpnConfiguration.
        :type: str
        """
        if lifetime is None:
            raise ValueError("Invalid value for `lifetime`, must not be `None`")

        self._lifetime = lifetime

    @property
    def remote_subnets(self):
        """
        Gets the remote_subnets of this VpnConfiguration.

        :return: The remote_subnets of this VpnConfiguration.
        :rtype: list[str]
        """
        return self._remote_subnets

    @remote_subnets.setter
    def remote_subnets(self, remote_subnets):
        """
        Sets the remote_subnets of this VpnConfiguration.

        :param remote_subnets: The remote_subnets of this VpnConfiguration.
        :type: list[str]
        """
        if remote_subnets is None:
            raise ValueError("Invalid value for `remote_subnets`, must not be `None`")

        self._remote_subnets = remote_subnets

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VpnConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
