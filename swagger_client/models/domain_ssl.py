# coding: utf-8

"""
    Platform API

    The REST API for Platform.sh.

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DomainSSL(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, certificate=None, chain=None, ca=None, key=None, expires_on=None, has_certificate=None):
        """
        DomainSSL - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'certificate': 'str',
            'chain': 'list[str]',
            'ca': 'str',
            'key': 'str',
            'expires_on': 'datetime',
            'has_certificate': 'bool'
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'chain': 'chain',
            'ca': 'ca',
            'key': 'key',
            'expires_on': 'expires_on',
            'has_certificate': 'has_certificate'
        }

        self._certificate = certificate
        self._chain = chain
        self._ca = ca
        self._key = key
        self._expires_on = expires_on
        self._has_certificate = has_certificate

    @property
    def certificate(self):
        """
        Gets the certificate of this DomainSSL.

        :return: The certificate of this DomainSSL.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """
        Sets the certificate of this DomainSSL.

        :param certificate: The certificate of this DomainSSL.
        :type: str
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate

    @property
    def chain(self):
        """
        Gets the chain of this DomainSSL.

        :return: The chain of this DomainSSL.
        :rtype: list[str]
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """
        Sets the chain of this DomainSSL.

        :param chain: The chain of this DomainSSL.
        :type: list[str]
        """
        if chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")

        self._chain = chain

    @property
    def ca(self):
        """
        Gets the ca of this DomainSSL.

        :return: The ca of this DomainSSL.
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """
        Sets the ca of this DomainSSL.

        :param ca: The ca of this DomainSSL.
        :type: str
        """
        if ca is None:
            raise ValueError("Invalid value for `ca`, must not be `None`")

        self._ca = ca

    @property
    def key(self):
        """
        Gets the key of this DomainSSL.

        :return: The key of this DomainSSL.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this DomainSSL.

        :param key: The key of this DomainSSL.
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def expires_on(self):
        """
        Gets the expires_on of this DomainSSL.

        :return: The expires_on of this DomainSSL.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """
        Sets the expires_on of this DomainSSL.

        :param expires_on: The expires_on of this DomainSSL.
        :type: datetime
        """
        if expires_on is None:
            raise ValueError("Invalid value for `expires_on`, must not be `None`")

        self._expires_on = expires_on

    @property
    def has_certificate(self):
        """
        Gets the has_certificate of this DomainSSL.

        :return: The has_certificate of this DomainSSL.
        :rtype: bool
        """
        return self._has_certificate

    @has_certificate.setter
    def has_certificate(self, has_certificate):
        """
        Sets the has_certificate of this DomainSSL.

        :param has_certificate: The has_certificate of this DomainSSL.
        :type: bool
        """
        if has_certificate is None:
            raise ValueError("Invalid value for `has_certificate`, must not be `None`")

        self._has_certificate = has_certificate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DomainSSL):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
